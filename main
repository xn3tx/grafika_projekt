import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import math
import time
import sys

WIDTH, HEIGHT = 800, 600
FPS = 60

class Drawing:
    @staticmethod   #umożliwia wywołanie bez tworzenia obiektu
    def set_2d_projection():
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluOrtho2D(0, WIDTH, HEIGHT, 0)  # układ współrzędnych zgodny z Pygame
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()

    @staticmethod
    def draw_rect(x, y, w, h, color):
        glColor3f(*[c / 255.0 for c in color])
        glBegin(GL_QUADS)
        glVertex2f(x, y)
        glVertex2f(x + w, y)
        glVertex2f(x + w, y + h)
        glVertex2f(x, y + h)
        glEnd()

    @staticmethod
    def draw_line(x1, y1, x2, y2, color, width=1):
        glLineWidth(width)
        glColor3f(*[c / 255.0 for c in color])
        glBegin(GL_LINES)
        glVertex2f(x1, y1)
        glVertex2f(x2, y2)
        glEnd()

class Wheel:
    def __init__(self, width=60, height=100):
        self.width = width
        self.height = height

    def draw_wheel(self, center_x, bottom_y):
        Drawing.draw_rect(center_x - self.width // 2, bottom_y - self.height, self.width, self.height, (40, 40, 40))
        # Bieżnik opony - poziome linie
        for y in range(bottom_y - self.height + 5, bottom_y, 10):
            Drawing.draw_line(center_x - self.width // 2, y, center_x + self.width // 2, y, (100, 100, 100), 2)

class Spring:
    def __init__(self):
        self.k = 200.0

    def draw_spring(self, attach_x, wheel_y, desk_y):
        spring_top = desk_y + 20
        Drawing.draw_line(attach_x, spring_top, attach_x, wheel_y, (0, 255, 0), 4)

class Attenuator:
    def __init__(self):
        self.b = 20.0

    def draw_attenuator(self, attach_x, wheel_y, desk_y):
        spring_top = desk_y + 20
        attenuator_y = (spring_top + wheel_y) // 2
        Drawing.draw_rect(attach_x - 10, attenuator_y - 20, 20, 40, (255, 165, 0))

class InputPlatform:
    def __init__(self):
        self.wheel = Wheel()
        self.spring = Spring()
        self.attenuator = Attenuator()

        self.platform_freq = 1.0
        self.platform_amp = 50.0
        self.mass = 1.0

        self.t = 0.0
        self.x = 0.0
        self.v = 0.0

    def platform_motion(self, time):
        return self.platform_amp * math.sin(2 * math.pi * self.platform_freq * time)

    def update_motion(self, dt):
        self.t += dt
        y_wheel = self.platform_motion(self.t)
        y_rel = self.x - y_wheel
        a = (-self.spring.k * y_rel - self.attenuator.b * self.v) / self.mass
        self.v += a * dt
        self.x += self.v * dt
        return y_wheel, self.x

    def draw_platform(self, center_x, platform_y, ground_y):
        Drawing.draw_line(center_x, platform_y + 20, center_x, ground_y, (180, 180, 180), 12)
        Drawing.draw_rect(center_x - 150, platform_y, 300, 20, (100, 100, 255))

def draw_scene(y_wheel, y_desk, system):
    glClear(GL_COLOR_BUFFER_BIT)
    center_x = WIDTH // 2
    platform_y = HEIGHT // 2 + int(y_wheel)
    desk_y = int(y_desk)
    ground_y = HEIGHT - 40

    # Podłoże
    Drawing.draw_line(0, ground_y, WIDTH, ground_y, (80, 80, 80), 6)

    # Platforma
    system.draw_platform(center_x, platform_y, ground_y)

    # Koło
    wheel_bottom_y = platform_y
    system.wheel.draw_wheel(center_x, wheel_bottom_y)
    wheel_axis_y = wheel_bottom_y - system.wheel.height // 2

    # Podwozie
    beam_start_x = center_x + system.wheel.width // 2
    beam_end_x = beam_start_x + 100
    Drawing.draw_line(beam_start_x, wheel_axis_y, beam_end_x, wheel_axis_y, (150, 150, 150), 8)
    Drawing.draw_rect(center_x + 50, desk_y, 200, 20, (180, 180, 180))

    # Sprężyna i tłumik
    spring_x = beam_end_x - 60
    attenuator_x = beam_end_x + 10
    system.spring.draw_spring(spring_x, wheel_axis_y, desk_y)
    system.attenuator.draw_attenuator(attenuator_x, wheel_axis_y, desk_y)

def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT), DOUBLEBUF | OPENGL)
    pygame.display.set_caption("Symulacja zawieszenia samochodu")
    Drawing.set_2d_projection()
    clock = pygame.time.Clock()
    system = InputPlatform()

    while True:
        dt = clock.tick(FPS) / 1000.0

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        y_wheel, y_desk = system.update_motion(dt)
        draw_scene(y_wheel, y_desk, system)
        pygame.display.flip()

if __name__ == "__main__":
    main()

