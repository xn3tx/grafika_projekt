import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import math
import time
import sys

# Parametry okna
WIDTH, HEIGHT = 800, 600
FPS = 60

class Spring:
    def __init__(self):
        self.k = 200.0  # współczynnik sprężystości

class Attenuator:
    def __init__(self):
        self.b = 20.0   # współczynnik tłumienia

class Wheel:
    def __init__(self, width=60, height=100):
        self.width = width
        self.height = height

    def draw_wheel(self, screen, center_x, bottom_y):
        pygame.draw.rect(
            screen,
            (40, 40, 40),
            (center_x - self.width // 2, bottom_y - self.height, self.width, self.height)
        )

        # Bieżnik – poziome paski
        for y in range(bottom_y - self.height + 5, bottom_y, 10):
            pygame.draw.line(
                screen,
                (100, 100, 100),
                (center_x - self.width // 2, y),
                (center_x + self.width // 2, y),
                2
            )

class InputPlatform:
    def __init__(self):
        self.wheel = Wheel()
        self.spring = Spring()
        self.attenuator = Attenuator()

        self.platform_freq = 1.0
        self.platform_amp = 50.0
        self.mass = 1.0

        self.t = 0.0
        self.x = 0.0  # przemieszczenie deski względem koła
        self.v = 0.0

    def platform_motion(self, time):
        return self.platform_amp * math.sin(2 * math.pi * self.platform_freq * time)

    def update_motion(self, dt):
        self.t += dt
        y_wheel = self.platform_motion(self.t)
        y_rel = self.x - y_wheel
        a = (-self.spring.k * y_rel - self.attenuator.b * self.v) / self.mass
        self.v += a * dt
        self.x += self.v * dt
        return y_wheel, self.x


def draw_scene(screen, y_wheel, y_desk, system):
    screen.fill((30, 30, 30))

    center_x = WIDTH // 2
    platform_y = HEIGHT // 2 + int(y_wheel)
    desk_y = int(y_desk)

    # Podłoże
    ground_y = HEIGHT - 40
    pygame.draw.line(screen, (80, 80, 80), (0, ground_y), (WIDTH, ground_y), 6)

    # "Noga" platformy 
    pygame.draw.line(screen, (180, 180, 180), (center_x, platform_y + 20), (center_x, ground_y), 12)

    # Platforma
    pygame.draw.rect(screen, (100, 100, 255), (center_x - 150, platform_y, 300, 20))

    # Koło (
    wheel_bottom_y = platform_y
    system.wheel.draw_wheel(screen, center_x, wheel_bottom_y)

    # Deska (górna część zawieszenia)
    pygame.draw.rect(screen, (180, 180, 180), (center_x - 100, desk_y, 200, 20))

    # Sprężyna – pionowa linia z lewej strony osi koła
    spring_top = desk_y + 20
    spring_bottom = wheel_bottom_y - system.wheel.height // 2
    pygame.draw.line(screen, (0, 255, 0), (center_x - 40, spring_top), (center_x - 40, spring_bottom), 4)

    # Tłumik – prostokąt po prawej stronie osi koła
    damper_x = center_x + 40
    damper_y = (spring_top + spring_bottom) // 2
    pygame.draw.rect(screen, (255, 165, 0), (damper_x - 10, damper_y - 20, 20, 40))


def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Symulacja zawieszenia samochodu")
    clock = pygame.time.Clock()
    system = InputPlatform()

    while True:
        dt = clock.tick(FPS) / 1000.0

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        y_wheel, y_desk = system.update_motion(dt)
        draw_scene(screen, y_wheel, y_desk, system)
        pygame.display.flip()

if __name__ == "__main__":
    main()


